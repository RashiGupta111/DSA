//Brute Force


class Solution {
public:
    int majorityElement(vector<int>& nums) {
        for(int i=0; i<nums.size(); i++){
                    int count=0;
            for(int j=i; j<nums.size(); j++){
                if(nums[j]==nums[i]){
                    count++;
                }
             }

                if( count > floor(nums.size()/2) ){
                    return nums[i];
            }
            else
              continue;
        }
        return -1;
    }
};



//Time Limit Exceeded in this


=======================================================================================================


//Optimised 

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int fq=1;
        int ans= nums[0];

        sort(nums.begin(),nums.end());

        int n=nums.size();

        if(n==1){
                return ans;
            }

        else{
        for(int i=0; i<n-1; i++){
            if(nums[i+1]==nums[i]){
                fq++;
                if(fq>n/2){
                    return nums[i];
                }
            }
            else{
                fq=1;
            }
        }
        return -1;
    }
    }
};



=================================================================================================


//Moore's voting Algo

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int n=nums.size();
        
        int fq=0;
        int ans=0;

        for(int i=0; i<n; i++){
            if(fq==0){
                ans=nums[i];
            }
            if(ans==nums[i]){
                fq++;
            }
            else{
                fq--;
            }
        }
        int count=0;

        for(int val:nums){
            if(val==ans){
            count++;
            }
        }

        if(count>n/2){
            return ans;
        }
        else{
        return -1;
        }
    }
};